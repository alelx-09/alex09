{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd \n",
    "import numpy as np \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn import preprocessing\n",
    "from matplotlib import pyplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "file = \"http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\"\n",
    "names = [\"sepal length\",\"sepal width\",\"petal length\",\"petal width\",\"class\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length  sepal width  petal length  petal width        class\n",
       "0           5.1          3.5           1.4          0.2  Iris-setosa\n",
       "1           4.9          3.0           1.4          0.2  Iris-setosa\n",
       "2           4.7          3.2           1.3          0.2  Iris-setosa\n",
       "3           4.6          3.1           1.5          0.2  Iris-setosa\n",
       "4           5.0          3.6           1.4          0.2  Iris-setosa"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(file, names=names)\n",
    "df.dropna(inplace =True)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.6</td>\n",
       "      <td>2.4</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>6.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>5.8</td>\n",
       "      <td>2.7</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>6.8</td>\n",
       "      <td>3.2</td>\n",
       "      <td>5.9</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.3</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal length  sepal width  petal length  petal width           class\n",
       "140           6.7          3.1           5.6          2.4  Iris-virginica\n",
       "141           6.9          3.1           5.1          2.3  Iris-virginica\n",
       "142           5.8          2.7           5.1          1.9  Iris-virginica\n",
       "143           6.8          3.2           5.9          2.3  Iris-virginica\n",
       "144           6.7          3.3           5.7          2.5  Iris-virginica\n",
       "145           6.7          3.0           5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5           5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0           5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4           5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0           5.1          1.8  Iris-virginica"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.array(df.drop([\"class\"],1),dtype=np.float64)\n",
    "y = np.array(df[\"class\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int64)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#this dataset has string you trun the calss into a number \n",
    "le = preprocessing.LabelEncoder()\n",
    "le.fit(y)\n",
    "le.transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler().fit(X)\n",
    "X= scaler.transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20, random_state = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\User\\AppData\\Local\\conda\\conda\\envs\\my_root\\lib\\site-packages\\sklearn\\neural_network\\multilayer_perceptron.py:563: ConvergenceWarning: Stochastic Optimizer: Maximum iterations reached and the optimization hasn't converged yet.\n",
      "  % (), ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "       beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "       hidden_layer_sizes=(100,), learning_rate='constant',\n",
       "       learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
       "       nesterovs_momentum=True, power_t=0.5, random_state=None,\n",
       "       shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,\n",
       "       verbose=False, warm_start=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf =MLPClassifier()\n",
    "clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.975\n"
     ]
    }
   ],
   "source": [
    "score = clf.score(X_train,y_train)\n",
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Iris-versicolor']\n"
     ]
    }
   ],
   "source": [
    "example = np.array([4.4,3.3,1.4,0.5]).reshape(1,-1)\n",
    "pre = clf.predict(example)\n",
    "print(pre)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1ec5a9af828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist()\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       sepal length  sepal width  petal length  petal width\n",
       "count    150.000000   150.000000    150.000000   150.000000\n",
       "mean       5.843333     3.054000      3.758667     1.198667\n",
       "std        0.828066     0.433594      1.764420     0.763161\n",
       "min        4.300000     2.000000      1.000000     0.100000\n",
       "25%        5.100000     2.800000      1.600000     0.300000\n",
       "50%        5.800000     3.000000      4.350000     1.300000\n",
       "75%        6.400000     3.300000      5.100000     1.800000\n",
       "max        7.900000     4.400000      6.900000     2.500000"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>5.006</td>\n",
       "      <td>3.418</td>\n",
       "      <td>1.464</td>\n",
       "      <td>0.244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>5.936</td>\n",
       "      <td>2.770</td>\n",
       "      <td>4.260</td>\n",
       "      <td>1.326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>6.588</td>\n",
       "      <td>2.974</td>\n",
       "      <td>5.552</td>\n",
       "      <td>2.026</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 sepal length  sepal width  petal length  petal width\n",
       "class                                                                \n",
       "Iris-setosa             5.006        3.418         1.464        0.244\n",
       "Iris-versicolor         5.936        2.770         4.260        1.326\n",
       "Iris-virginica          6.588        2.974         5.552        2.026"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"class\").mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sepal length</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4.3</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.4</th>\n",
       "      <td>3.033333</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.5</th>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.6</th>\n",
       "      <td>3.325000</td>\n",
       "      <td>1.325000</td>\n",
       "      <td>0.225000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.7</th>\n",
       "      <td>3.200000</td>\n",
       "      <td>1.450000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.8</th>\n",
       "      <td>3.180000</td>\n",
       "      <td>1.580000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.9</th>\n",
       "      <td>2.866667</td>\n",
       "      <td>2.283333</td>\n",
       "      <td>0.533333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>3.120000</td>\n",
       "      <td>1.840000</td>\n",
       "      <td>0.430000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.1</th>\n",
       "      <td>3.477778</td>\n",
       "      <td>1.722222</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.2</th>\n",
       "      <td>3.425000</td>\n",
       "      <td>2.075000</td>\n",
       "      <td>0.475000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.3</th>\n",
       "      <td>3.700000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.4</th>\n",
       "      <td>3.550000</td>\n",
       "      <td>2.033333</td>\n",
       "      <td>0.516667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.5</th>\n",
       "      <td>2.842857</td>\n",
       "      <td>3.228571</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.6</th>\n",
       "      <td>2.816667</td>\n",
       "      <td>4.200000</td>\n",
       "      <td>1.416667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.7</th>\n",
       "      <td>3.100000</td>\n",
       "      <td>3.587500</td>\n",
       "      <td>1.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.8</th>\n",
       "      <td>2.885714</td>\n",
       "      <td>4.071429</td>\n",
       "      <td>1.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.9</th>\n",
       "      <td>3.066667</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>1.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>2.733333</td>\n",
       "      <td>4.650000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.1</th>\n",
       "      <td>2.850000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>1.416667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.2</th>\n",
       "      <td>2.825000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>1.725000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.3</th>\n",
       "      <td>2.855556</td>\n",
       "      <td>5.133333</td>\n",
       "      <td>1.811111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.4</th>\n",
       "      <td>2.957143</td>\n",
       "      <td>5.157143</td>\n",
       "      <td>1.871429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.5</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.240000</td>\n",
       "      <td>1.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.6</th>\n",
       "      <td>2.950000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.7</th>\n",
       "      <td>3.050000</td>\n",
       "      <td>5.262500</td>\n",
       "      <td>1.962500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.8</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>1.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.9</th>\n",
       "      <td>3.125000</td>\n",
       "      <td>5.275000</td>\n",
       "      <td>2.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.0</th>\n",
       "      <td>3.200000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>1.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.900000</td>\n",
       "      <td>2.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.2</th>\n",
       "      <td>3.266667</td>\n",
       "      <td>5.966667</td>\n",
       "      <td>1.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.3</th>\n",
       "      <td>2.900000</td>\n",
       "      <td>6.300000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.4</th>\n",
       "      <td>2.800000</td>\n",
       "      <td>6.100000</td>\n",
       "      <td>1.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.6</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.7</th>\n",
       "      <td>3.050000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.9</th>\n",
       "      <td>3.800000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              sepal width  petal length  petal width\n",
       "sepal length                                        \n",
       "4.3              3.000000      1.100000     0.100000\n",
       "4.4              3.033333      1.333333     0.200000\n",
       "4.5              2.300000      1.300000     0.300000\n",
       "4.6              3.325000      1.325000     0.225000\n",
       "4.7              3.200000      1.450000     0.200000\n",
       "4.8              3.180000      1.580000     0.200000\n",
       "4.9              2.866667      2.283333     0.533333\n",
       "5.0              3.120000      1.840000     0.430000\n",
       "5.1              3.477778      1.722222     0.400000\n",
       "5.2              3.425000      2.075000     0.475000\n",
       "5.3              3.700000      1.500000     0.200000\n",
       "5.4              3.550000      2.033333     0.516667\n",
       "5.5              2.842857      3.228571     0.900000\n",
       "5.6              2.816667      4.200000     1.416667\n",
       "5.7              3.100000      3.587500     1.100000\n",
       "5.8              2.885714      4.071429     1.400000\n",
       "5.9              3.066667      4.700000     1.700000\n",
       "6.0              2.733333      4.650000     1.500000\n",
       "6.1              2.850000      4.750000     1.416667\n",
       "6.2              2.825000      4.750000     1.725000\n",
       "6.3              2.855556      5.133333     1.811111\n",
       "6.4              2.957143      5.157143     1.871429\n",
       "6.5              3.000000      5.240000     1.900000\n",
       "6.6              2.950000      4.500000     1.350000\n",
       "6.7              3.050000      5.262500     1.962500\n",
       "6.8              3.000000      5.400000     1.933333\n",
       "6.9              3.125000      5.275000     2.050000\n",
       "7.0              3.200000      4.700000     1.400000\n",
       "7.1              3.000000      5.900000     2.100000\n",
       "7.2              3.266667      5.966667     1.966667\n",
       "7.3              2.900000      6.300000     1.800000\n",
       "7.4              2.800000      6.100000     1.900000\n",
       "7.6              3.000000      6.600000     2.100000\n",
       "7.7              3.050000      6.600000     2.200000\n",
       "7.9              3.800000      6.400000     2.000000"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"sepal length\").mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
