{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "machine learnin uses numbers to represent features for example male is a 1 female is a 0 or if we \n",
    "have 3 countries U.S.A, Japan, and russina we would need to conver them to numbers or our machine \n",
    "learning algorithm will not work the best way to this would be to make U.S.A be a 0 japan would be a 1 and Russia would be a 2 in the example \n",
    "below i am using a dataset from uci irving its the adult census it has strings and intiger this\n",
    "will not work i found many ways to deal with non numeric data using pandas and sklearns LabelEncoder\n",
    "as well as the map function to transform the data so we can run it on a classifier\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#first we import pandas, sklearn-Label Encoder, and numpy\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#we create and load the data using pandas pd.read_csv and specify what we cant to call each\n",
    "#column using the names = headers\n",
    "headers = [\"age\",\"work\",\"wgt\",\"ed\",\"edcon\",\"marrige\",\"occupa\",\"relationship\",\"race\",\"sex\",\"gain\",\"loss\",\"hpw\",\"nc\",\"sal\"]\n",
    "df = pd.read_csv(\"http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\", names = headers, index_col = None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#now we can see that our data contains initgers and strings this will not work for our classifier\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we can see the strings are stored as objects if we try fitting this into a classifier \n",
    "#it will throw an error: could not conver string(object) into float\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#this is a good example we are converting all objects into binary encoding \n",
    "#for exaple sex is a 1 for male 0 for female \n",
    "#the iloc is droping any columns that we dont need becasue we get 2 new cloumns\n",
    "#one for sex_male and Sex_female we only need one\n",
    "work_dum = pd.get_dummies(df.work ,prefix = \"work\").iloc[:, 1:]\n",
    "race_dum = pd.get_dummies(df.race, prefix= \"race\").iloc[:, 1:]\n",
    "marri_dum = pd.get_dummies(df.marrige , prefix = \"mari\").iloc[:, 1:]\n",
    "occ_dum = pd.get_dummies(df.occupa,prefix= \"occ\").iloc[:, 1:]\n",
    "re_dum = pd.get_dummies(df.relationship , prefix= \"relat\").iloc[:, 1:]\n",
    "nc_dum = pd.get_dummies(df.nc,prefix= \"nc\").iloc[:, 1:]\n",
    "sal_dum = pd.get_dummies(df.sal,prefix = \"sal\").iloc[:, 1:]\n",
    "ed_dum = pd.get_dummies(df.ed,prefix = \"ed\").iloc[:, 1:]\n",
    "sex_dum = pd.get_dummies(df,prefix= \"sex\").iloc[:, 1:]\n",
    "\n",
    "#then we concatinate the new dataframe with original dataframe \n",
    "#we specifiy the axis using a 1 to add the new columns and 0 to add the data as rows\n",
    "df = pd.concat([df,sex_dum,ed_dum,work_dum,race_dum, marri_dum,occ_dum,re_dum,sal_dum],axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#you can see this worked but now it has 177 columns which is not very effective\n",
    "#and still contains strings \n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#we can drop rows that we dont need using the drop mehod\n",
    "df.drop([\"work\",\"ed\",\"marrige\",\"occupa\",\"relationship\",\"race\",\"sex\",\"nc\",\"sal\"],1,inplace =True)\n",
    "\n",
    "#looks better but still lots of columns maybe theres a better way\n",
    "df.head(1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is the same thing as the example above but its much easier we pass a list of columns \n",
    "#then we drop the column we dont need using drop_first = True\n",
    "#you would still need to drop all the columns containing strings\n",
    "pd.get_dummies(df)\n",
    "pd.get_dummies(df,columns = [\"your list of columns\"],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#we can split the data into x and y using pandas and numpy\n",
    "\n",
    "x = np.array(df.drop([\"sal\"],1))\n",
    "y = np.array(df[\"sal\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#using sklearns we can encode the whole dataframe or just certain columns\n",
    "#this is much better than using one hot encoding or pandas dummies\n",
    "#it will not create new columns sex will simply be a 0 for male and 1 for female\n",
    "#even if there are more that 2 objects in a column\n",
    "le = LabelEncoder().fit(x or y)\n",
    "le.transfor(x or y)\n",
    "\n",
    "df.apply(LabelEncoder().fit_transform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# we can map and send a dictionary of values using\n",
    "df[\"sex_male\"]= df.sex.map({\"male\":1,\"female\":0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# we can change the object type to category which is similar to label encoder\n",
    "df[\"sal\"]= df.sal.astype(\"category\")\n",
    "df[\"work\"]= df.work.astype(\"category\")\n",
    "df[\"ed\"]= df.ed.astype(\"category\")\n",
    "df[\"marrige\"]= df.marrige.astype(\"category\")\n",
    "df[\"occupa\"]= df.occupa.astype(\"category\")\n",
    "df[\"relationship\"] = df.relationship.astype(\"category\")\n",
    "df[\"race\"]= df.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#this was the easiest way but it was depricated and replced by the example below pd.to_numeric\n",
    "df.convert_objects(convert_numeric= True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#this method works but it has to be a series or list we cant pass an entire dataframe to it\n",
    "pd.to_numeric(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#you can also use the help function if theres something eles you need help with\n",
    "help()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
